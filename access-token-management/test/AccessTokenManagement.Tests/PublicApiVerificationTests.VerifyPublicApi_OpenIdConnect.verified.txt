namespace Duende.AccessTokenManagement.OpenIdConnect
{
    public static class HttpContextExtensions
    {
        public static System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.ClientCredentialsToken>> GetClientAccessTokenAsync(this Microsoft.AspNetCore.Http.HttpContext httpContext, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default) { }
        public static System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.UserToken>> GetUserAccessTokenAsync(this Microsoft.AspNetCore.Http.HttpContext httpContext, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default) { }
        public static System.Threading.Tasks.Task RevokeRefreshTokenAsync(this Microsoft.AspNetCore.Http.HttpContext httpContext, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default) { }
    }
    public interface IOpenIdConnectConfigurationService
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.OpenIdConnect.OpenIdConnectClientConfiguration> GetOpenIdConnectConfigurationAsync(Duende.AccessTokenManagement.Scheme? schemeName = default, System.Threading.CancellationToken ct = default);
    }
    public interface IOpenIdConnectUserTokenEndpoint
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.UserToken>> RefreshAccessTokenAsync(Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken userToken, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters parameters, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task RevokeRefreshTokenAsync(Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken userToken, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters parameters, System.Threading.CancellationToken ct = default);
    }
    public interface IStoreTokensInAuthenticationProperties
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.Scheme> GetSchemeAsync(Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
        Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.TokenForParameters> GetUserToken(Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null);
        void RemoveUserToken(Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null);
        System.Threading.Tasks.Task SetUserTokenAsync(Duende.AccessTokenManagement.OpenIdConnect.UserToken token, Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
    }
    public interface IUserAccessor
    {
        System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal> GetCurrentUserAsync(System.Threading.CancellationToken ct = default);
    }
    public interface IUserTokenManager
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.UserToken>> GetAccessTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task RevokeRefreshTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
    }
    public interface IUserTokenRequestConcurrencyControl
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.UserToken>> ExecuteWithConcurrencyControlAsync(Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken key, System.Func<System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.UserToken>>> tokenRetriever, System.Threading.CancellationToken ct = default);
    }
    public interface IUserTokenStore
    {
        System.Threading.Tasks.Task ClearTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.OpenIdConnect.TokenForParameters>> GetTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task StoreTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserToken token, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
    }
    public sealed class OpenIdConnectClientConfiguration
    {
        public OpenIdConnectClientConfiguration() { }
        public required Duende.AccessTokenManagement.ClientId ClientId { get; set; }
        public Duende.AccessTokenManagement.ClientSecret? ClientSecret { get; set; }
        public System.Net.Http.HttpClient? HttpClient { get; set; }
        public System.Uri? RevocationEndpoint { get; set; }
        public Duende.AccessTokenManagement.Scheme Scheme { get; set; }
        public required System.Uri TokenEndpoint { get; set; }
    }
    public static class OpenIdConnectTokenManagementDefaults
    {
        public const string ClientCredentialsClientNamePrefix = "Duende.TokenManagement.SchemeBasedClient:";
        public static Duende.AccessTokenManagement.ClientCredentialsClientName ToClientName(this Duende.AccessTokenManagement.Scheme scheme) { }
    }
    public static class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBlazorServerAccessTokenManagement<TTokenStore>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where TTokenStore :  class, Duende.AccessTokenManagement.OpenIdConnect.IUserTokenStore { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientAccessTokenHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientAccessTokenHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Action<System.Net.Http.HttpClient>? configureClient = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientAccessTokenHttpClient<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Action<System.Net.Http.HttpClient>? configureClient = null)
            where T :  class { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddOpenIdConnectAccessTokenManagement(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddOpenIdConnectAccessTokenManagement(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Duende.AccessTokenManagement.OpenIdConnect.UserTokenManagementOptions> configureAction) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddUserAccessTokenHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddUserAccessTokenHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Action<System.Net.Http.HttpClient>? configureClient = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddUserAccessTokenHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Action<System.IServiceProvider, System.Net.Http.HttpClient>? configureClient = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddUserAccessTokenHttpClient<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null, System.Action<System.IServiceProvider, System.Net.Http.HttpClient>? configureClient = null)
            where T :  class { }
    }
    public sealed class TokenForParameters : System.IEquatable<Duende.AccessTokenManagement.OpenIdConnect.TokenForParameters>
    {
        public TokenForParameters(Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken refreshToken) { }
        public TokenForParameters(Duende.AccessTokenManagement.OpenIdConnect.UserToken tokenForSpecifiedParameters, Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken? refreshToken) { }
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "RefreshToken")]
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "TokenForSpecifiedParameters")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "RefreshToken")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "TokenForSpecifiedParameters")]
        [set: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "RefreshToken")]
        [set: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "TokenForSpecifiedParameters")]
        public bool NoRefreshToken { get; }
        public Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken? RefreshToken { get; }
        public Duende.AccessTokenManagement.OpenIdConnect.UserToken? TokenForSpecifiedParameters { get; }
    }
    public delegate System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal> TransformPrincipalAfterRefreshAsync(System.Security.Claims.ClaimsPrincipal principal, System.Threading.CancellationToken ct);
    public sealed class UserRefreshToken : System.IEquatable<Duende.AccessTokenManagement.OpenIdConnect.UserRefreshToken>
    {
        public UserRefreshToken(Duende.AccessTokenManagement.RefreshToken RefreshToken, Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPProofKey) { }
        public Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPProofKey { get; init; }
        public Duende.AccessTokenManagement.RefreshToken RefreshToken { get; init; }
    }
    public sealed class UserToken : Duende.AccessTokenManagement.AccessTokenRequestHandler.IToken, System.IEquatable<Duende.AccessTokenManagement.OpenIdConnect.UserToken>
    {
        public UserToken() { }
        public required Duende.AccessTokenManagement.AccessToken AccessToken { get; init; }
        public required Duende.AccessTokenManagement.AccessTokenType? AccessTokenType { get; init; }
        public required Duende.AccessTokenManagement.ClientId ClientId { get; init; }
        public Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPJsonWebKey { get; init; }
        public required System.DateTimeOffset Expiration { get; init; }
        public Duende.AccessTokenManagement.IdentityToken? IdentityToken { get; init; }
        public Duende.AccessTokenManagement.RefreshToken? RefreshToken { get; init; }
        public Duende.AccessTokenManagement.Scope? Scope { get; init; }
    }
    public sealed class UserTokenManagementOptions
    {
        public UserTokenManagementOptions() { }
        public Duende.AccessTokenManagement.Scheme? ChallengeScheme { get; set; }
        public Duende.IdentityModel.Client.ClientCredentialStyle ClientCredentialStyle { get; set; }
        public Duende.AccessTokenManagement.Resource? ClientCredentialsResource { get; set; }
        public Duende.AccessTokenManagement.Scope? ClientCredentialsScope { get; set; }
        public Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPJsonWebKey { get; set; }
        public System.TimeSpan RefreshBeforeExpiration { get; set; }
        public bool UseChallengeSchemeScopedTokens { get; set; }
    }
    public sealed class UserTokenRequestParameters : Duende.AccessTokenManagement.TokenRequestParameters, System.IEquatable<Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters>
    {
        public UserTokenRequestParameters() { }
        public Duende.AccessTokenManagement.Scheme? ChallengeScheme { get; set; }
        public Duende.AccessTokenManagement.Scheme? SignInScheme { get; set; }
    }
}
