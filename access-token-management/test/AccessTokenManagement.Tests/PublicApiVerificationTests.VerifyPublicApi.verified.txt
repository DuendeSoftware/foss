namespace Duende.AccessTokenManagement
{
    [System.Text.Json.Serialization.JsonConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueJsonConverter<Duende.AccessTokenManagement.AccessToken>))]
    public readonly struct AccessToken : System.IEquatable<Duende.AccessTokenManagement.AccessToken>
    {
        public const int MaxLength = 32768;
        public AccessToken() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.AccessToken Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.AccessToken? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.AccessToken value) { }
        public static Duende.AccessTokenManagement.AccessToken op_Implicit(string value) { }
    }
    public sealed class AccessTokenRequestHandler : System.Net.Http.DelegatingHandler
    {
        public AccessTokenRequestHandler(Duende.AccessTokenManagement.DPoP.IDPoPNonceStore dPoPNonceStore, Duende.AccessTokenManagement.DPoP.IDPoPProofService dPoPProofService, Duende.AccessTokenManagement.AccessTokenRequestHandler.ITokenRetriever tokenRetriever, Microsoft.Extensions.Logging.ILogger<Duende.AccessTokenManagement.AccessTokenRequestHandler> logger) { }
        protected override System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken ct) { }
        protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken ct) { }
        public interface IToken
        {
            Duende.AccessTokenManagement.AccessToken AccessToken { get; }
            Duende.AccessTokenManagement.AccessTokenType? AccessTokenType { get; }
            Duende.AccessTokenManagement.ClientId ClientId { get; }
            Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPJsonWebKey { get; }
        }
        public interface ITokenRetriever
        {
            System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.AccessTokenRequestHandler.IToken>> GetTokenAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken ct);
        }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueJsonConverter<Duende.AccessTokenManagement.AccessTokenType>))]
    public readonly struct AccessTokenType : System.IEquatable<Duende.AccessTokenManagement.AccessTokenType>
    {
        public const int MaxLength = 50;
        public AccessTokenType() { }
        public Duende.AccessTokenManagement.Scheme ToScheme() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.AccessTokenType Parse(string value) { }
        public static Duende.AccessTokenManagement.AccessTokenType? ParseOrDefault(string? value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.AccessTokenType? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.AccessTokenType value) { }
        public static Duende.AccessTokenManagement.AccessTokenType op_Implicit(string value) { }
    }
    public readonly struct ClientCredentialsCacheKey : System.IEquatable<Duende.AccessTokenManagement.ClientCredentialsCacheKey>
    {
        public const int MaxLength = 255;
        public ClientCredentialsCacheKey() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.ClientCredentialsCacheKey Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.ClientCredentialsCacheKey? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.ClientCredentialsCacheKey key) { }
        public static Duende.AccessTokenManagement.ClientCredentialsCacheKey op_Implicit(string value) { }
    }
    public sealed class ClientCredentialsClient
    {
        public ClientCredentialsClient() { }
        public Duende.IdentityModel.Client.BasicAuthenticationHeaderStyle AuthorizationHeaderStyle { get; set; }
        public Duende.IdentityModel.Client.ClientCredentialStyle ClientCredentialStyle { get; set; }
        public Duende.AccessTokenManagement.ClientId? ClientId { get; set; }
        public Duende.AccessTokenManagement.ClientSecret? ClientSecret { get; set; }
        public Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPJsonWebKey { get; set; }
        public System.Net.Http.HttpClient? HttpClient { get; set; }
        public string? HttpClientName { get; set; }
        public Duende.IdentityModel.Client.Parameters Parameters { get; set; }
        public Duende.AccessTokenManagement.Resource? Resource { get; set; }
        public Duende.AccessTokenManagement.Scope? Scope { get; set; }
        public System.Uri? TokenEndpoint { get; set; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public sealed class ClientCredentialsToken : Duende.AccessTokenManagement.AccessTokenRequestHandler.IToken, System.IEquatable<Duende.AccessTokenManagement.ClientCredentialsToken>
    {
        [System.Obsolete(("Constructors of types with required members are not supported in this version of " +
            "your compiler."), true)]
        [System.Runtime.CompilerServices.CompilerFeatureRequired("RequiredMembers")]
        public ClientCredentialsToken() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public Duende.AccessTokenManagement.AccessTokenType? AccessTokenType { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public Duende.AccessTokenManagement.AccessToken AccessToken { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public Duende.AccessTokenManagement.ClientId ClientId { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public Duende.AccessTokenManagement.DPoP.DPoPProofKey? DPoPJsonWebKey { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.DateTimeOffset Expiration { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public Duende.AccessTokenManagement.Scope? Scope { get; init; }
    }
    public sealed class ClientCredentialsTokenManagementBuilder
    {
        public ClientCredentialsTokenManagementBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
        public Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder AddClient(string name, System.Action<Duende.AccessTokenManagement.ClientCredentialsClient> configureOptions) { }
    }
    public static class ClientCredentialsTokenManagementDefaults
    {
        public const string BackChannelHttpClientName = "Duende.AccessTokenManagement.BackChannelHttpClient";
        public const string DPoPProofAdditionalPayloadClaims = "Duende.AccessTokenManagement.DPoPProofAdditionalPayloadClaims";
        public const string TokenRequestParametersOptionsName = "Duende.AccessTokenManagement.AccessTokenParameters";
    }
    public sealed class ClientCredentialsTokenManagementOptions
    {
        public ClientCredentialsTokenManagementOptions() { }
        public string CacheKeyPrefix { get; set; }
        public int CacheLifetimeBuffer { get; set; }
        public System.TimeSpan DefaultCacheLifetime { get; set; }
        public System.TimeSpan? LocalCacheExpiration { get; set; }
        public string NonceStoreKeyPrefix { get; set; }
        public bool UseCacheAutoTuning { get; set; }
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.ClientId>))]
    [System.Text.Json.Serialization.JsonConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueJsonConverter<Duende.AccessTokenManagement.ClientId>))]
    public readonly struct ClientId : System.IEquatable<Duende.AccessTokenManagement.ClientId>
    {
        public ClientId() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.ClientId Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.ClientId? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.ClientId value) { }
        public static Duende.AccessTokenManagement.ClientId op_Implicit(string value) { }
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.ClientSecret>))]
    public readonly struct ClientSecret : System.IEquatable<Duende.AccessTokenManagement.ClientSecret>
    {
        public ClientSecret() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.ClientSecret Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.ClientSecret? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.ClientSecret value) { }
        public static Duende.AccessTokenManagement.ClientSecret op_Implicit(string value) { }
    }
    public sealed class FailedResult : Duende.AccessTokenManagement.TokenResult, System.IEquatable<Duende.AccessTokenManagement.FailedResult>
    {
        public FailedResult(string Error, string? ErrorDescription = null) { }
        public string? ErrorDescription { get; init; }
        public string Error { get; init; }
        public override string ToString() { }
    }
    public readonly struct ForceTokenRenewal : System.IEquatable<Duende.AccessTokenManagement.ForceTokenRenewal>
    {
        public ForceTokenRenewal(bool Value) { }
        public bool Value { get; init; }
        public static Duende.AccessTokenManagement.ForceTokenRenewal op_Implicit(bool value) { }
    }
    public interface IClientAssertionService
    {
        System.Threading.Tasks.Task<Duende.IdentityModel.Client.ClientAssertion?> GetClientAssertionAsync(Duende.AccessTokenManagement.TokenClientName? clientName = default, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
    }
    public interface IClientCredentialsCacheKeyGenerator
    {
        Duende.AccessTokenManagement.ClientCredentialsCacheKey GenerateKey(Duende.AccessTokenManagement.TokenClientName clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null);
    }
    public interface IClientCredentialsTokenEndpoint
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.ClientCredentialsToken>> RequestAccessTokenAsync(Duende.AccessTokenManagement.TokenClientName clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
    }
    public interface IClientCredentialsTokenManager
    {
        System.Threading.Tasks.Task DeleteAccessTokenAsync(Duende.AccessTokenManagement.TokenClientName clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<Duende.AccessTokenManagement.ClientCredentialsToken>> GetAccessTokenAsync(Duende.AccessTokenManagement.TokenClientName clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken ct = default);
    }
    public readonly struct IdentityToken : System.IEquatable<Duende.AccessTokenManagement.IdentityToken>
    {
        public const int MaxLength = 32768;
        public IdentityToken() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.IdentityToken Parse(string value) { }
        public static Duende.AccessTokenManagement.IdentityToken? ParseOrDefault(string? value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.IdentityToken? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.IdentityToken value) { }
        public static Duende.AccessTokenManagement.IdentityToken op_Implicit(string value) { }
    }
    public readonly struct RefreshToken : System.IEquatable<Duende.AccessTokenManagement.RefreshToken>
    {
        public const int MaxLength = 4096;
        public RefreshToken() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.RefreshToken Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.RefreshToken? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.RefreshToken value) { }
        public static Duende.AccessTokenManagement.RefreshToken op_Implicit(string value) { }
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.Resource>))]
    public readonly struct Resource : System.IEquatable<Duende.AccessTokenManagement.Resource>
    {
        public const int MaxLength = 1024;
        public Resource() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.Resource Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.Resource? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.Resource value) { }
        public static Duende.AccessTokenManagement.Resource op_Implicit(string value) { }
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.Scheme>))]
    public readonly struct Scheme : System.IEquatable<Duende.AccessTokenManagement.Scheme>
    {
        public const int MaxLength = 50;
        public static readonly Duende.AccessTokenManagement.Scheme Bearer;
        public Scheme() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.Scheme Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.Scheme? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.Scheme value) { }
        public static Duende.AccessTokenManagement.Scheme op_Implicit(string value) { }
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.Scope>))]
    [System.Text.Json.Serialization.JsonConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueJsonConverter<Duende.AccessTokenManagement.Scope>))]
    public readonly struct Scope : System.IEquatable<Duende.AccessTokenManagement.Scope>
    {
        public const int MaxLength = 1024;
        public Scope() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.Scope Parse(string value) { }
        public static Duende.AccessTokenManagement.Scope? ParseOrDefault(string? value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.Scope? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.Scope value) { }
        public static Duende.AccessTokenManagement.Scope op_Implicit(string value) { }
    }
    public static class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientCredentialsHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string httpClientName, Duende.AccessTokenManagement.TokenClientName tokenClientName, System.Action<System.Net.Http.HttpClient>? configureClient = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientCredentialsHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string httpClientName, Duende.AccessTokenManagement.TokenClientName tokenClientName, System.Action<System.IServiceProvider, System.Net.Http.HttpClient> configureClient) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientCredentialsTokenHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, Duende.AccessTokenManagement.TokenClientName tokenClientName) { }
        public static Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder AddClientCredentialsTokenManagement(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public static Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder AddClientCredentialsTokenManagement(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Duende.AccessTokenManagement.ClientCredentialsTokenManagementOptions> options) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddDefaultAccessTokenResiliency(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder) { }
    }
    public static class ServiceProviderKeys
    {
        public const string ClientCredentialsTokenCache = "ClientCredentialsTokenCache";
        public const string DPoPNonceStore = "DPoPNonceStore";
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.TokenClientName>))]
    public readonly struct TokenClientName : System.IEquatable<Duende.AccessTokenManagement.TokenClientName>
    {
        public TokenClientName() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.TokenClientName Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.TokenClientName? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.TokenClientName value) { }
        public static Duende.AccessTokenManagement.TokenClientName op_Implicit(string value) { }
    }
    public class TokenRequestParameters : System.IEquatable<Duende.AccessTokenManagement.TokenRequestParameters>
    {
        public TokenRequestParameters() { }
        public Duende.IdentityModel.Client.ClientAssertion? Assertion { get; init; }
        public Duende.IdentityModel.Client.Parameters Context { get; init; }
        public Duende.AccessTokenManagement.ForceTokenRenewal ForceTokenRenewal { get; init; }
        public Duende.IdentityModel.Client.Parameters Parameters { get; init; }
        public Duende.AccessTokenManagement.Resource? Resource { get; init; }
        public Duende.AccessTokenManagement.Scope? Scope { get; init; }
    }
    public abstract class TokenResult : System.IEquatable<Duende.AccessTokenManagement.TokenResult>
    {
        protected TokenResult() { }
        public static Duende.AccessTokenManagement.FailedResult Failure(string error, string? errorDescription = null) { }
        public static Duende.AccessTokenManagement.TokenResult<T> Success<T>(T token)
            where T :  class { }
    }
    public static class TokenResultExtensions
    {
        public static System.Threading.Tasks.Task<T> GetToken<T>(this System.Threading.Tasks.Task<Duende.AccessTokenManagement.TokenResult<T>> task)
            where T :  class { }
    }
    public sealed class TokenResult<T> : Duende.AccessTokenManagement.TokenResult, System.IEquatable<Duende.AccessTokenManagement.TokenResult<T>>
        where T :  class
    {
        public Duende.AccessTokenManagement.FailedResult? FailedResult { get; }
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "FailedResult")]
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "Token")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "FailedResult")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "Token")]
        public bool Succeeded { get; }
        public T Token { get; }
        public bool WasSuccessful(out T result) { }
        public bool WasSuccessful([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result, [System.Diagnostics.CodeAnalysis.NotNullWhen(false)] out Duende.AccessTokenManagement.FailedResult? failure) { }
        public static Duende.AccessTokenManagement.TokenResult<T> op_Implicit(Duende.AccessTokenManagement.FailedResult failure) { }
        public static Duende.AccessTokenManagement.TokenResult<T> op_Implicit(T input) { }
    }
}
namespace Duende.AccessTokenManagement.DPoP
{
    public static class DPoPExtensions
    {
        public static void AddDPoPProofAdditionalPayloadClaims(this System.Net.Http.HttpRequestMessage request, System.Collections.Generic.IDictionary<string, string> customClaims) { }
        public static void ClearDPoPProofToken(this System.Net.Http.HttpRequestMessage request) { }
        public static string? GetDPoPError(this System.Net.Http.HttpResponseMessage response) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPNonce? GetDPoPNonce(this System.Net.Http.HttpRequestMessage request) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPNonce? GetDPoPNonce(this System.Net.Http.HttpResponseMessage response) { }
        public static System.Uri GetDPoPUrl(this System.Net.Http.HttpRequestMessage request) { }
        public static Duende.AccessTokenManagement.ForceTokenRenewal GetForceRenewal(this System.Net.Http.HttpRequestMessage request) { }
        public static bool IsDPoPError(this System.Net.Http.HttpResponseMessage response) { }
        public static void SetDPoPNonce(this System.Net.Http.HttpRequestMessage request, Duende.AccessTokenManagement.DPoP.DPoPNonce nonce) { }
        public static void SetDPoPProofToken(this System.Net.Http.HttpRequestMessage request, Duende.AccessTokenManagement.DPoP.DPoPProof proof) { }
        public static void SetForceRenewal(this System.Net.Http.HttpRequestMessage request, Duende.AccessTokenManagement.ForceTokenRenewal forceTokenRenewal) { }
        public static bool TryGetDPopProofAdditionalPayloadClaims(this System.Net.Http.HttpRequestMessage request, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out System.Collections.Generic.IReadOnlyDictionary<string, string>? additionalClaims) { }
    }
    public readonly struct DPoPNonce : System.IEquatable<Duende.AccessTokenManagement.DPoP.DPoPNonce>
    {
        public DPoPNonce() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.DPoP.DPoPNonce Parse(string value) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPNonce? ParseOrDefault(string? value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.DPoP.DPoPNonce? parsed, out string[] errors) { }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public sealed class DPoPNonceContext : System.IEquatable<Duende.AccessTokenManagement.DPoP.DPoPNonceContext>
    {
        [System.Obsolete(("Constructors of types with required members are not supported in this version of " +
            "your compiler."), true)]
        [System.Runtime.CompilerServices.CompilerFeatureRequired("RequiredMembers")]
        public DPoPNonceContext() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Net.Http.HttpMethod Method { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Uri Url { get; set; }
    }
    public readonly struct DPoPProof : System.IEquatable<Duende.AccessTokenManagement.DPoP.DPoPProof>
    {
        public DPoPProof() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProof Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.DPoP.DPoPProof? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.DPoP.DPoPProof value) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProof op_Implicit(string value) { }
    }
    [System.ComponentModel.TypeConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueConverter<Duende.AccessTokenManagement.DPoP.DPoPProofKey>))]
    [System.Text.Json.Serialization.JsonConverter(typeof(Duende.AccessTokenManagement.Internal.StringValueJsonConverter<Duende.AccessTokenManagement.DPoP.DPoPProofKey>))]
    public readonly struct DPoPProofKey : System.IEquatable<Duende.AccessTokenManagement.DPoP.DPoPProofKey>
    {
        public DPoPProofKey() { }
        public bool Equals(Duende.AccessTokenManagement.DPoP.DPoPProofKey other) { }
        public override int GetHashCode() { }
        public Microsoft.IdentityModel.Tokens.JsonWebKey ToJsonWebKey() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProofKey Parse(string value) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProofKey? ParseOrDefault(string? value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.DPoP.DPoPProofKey? parsed, out string[] errors) { }
        public static string op_Implicit(Duende.AccessTokenManagement.DPoP.DPoPProofKey value) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProofKey op_Implicit(string value) { }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public sealed class DPoPProofRequest : System.IEquatable<Duende.AccessTokenManagement.DPoP.DPoPProofRequest>
    {
        [System.Obsolete(("Constructors of types with required members are not supported in this version of " +
            "your compiler."), true)]
        [System.Runtime.CompilerServices.CompilerFeatureRequired("RequiredMembers")]
        public DPoPProofRequest() { }
        public Duende.AccessTokenManagement.AccessToken? AccessToken { get; init; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string>? AdditionalPayloadClaims { get; init; }
        public Duende.AccessTokenManagement.DPoP.DPoPNonce? DPoPNonce { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public Duende.AccessTokenManagement.DPoP.DPoPProofKey DPoPProofKey { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Net.Http.HttpMethod Method { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Uri Url { get; init; }
    }
    public readonly struct DPoPProofThumbprint : System.IEquatable<Duende.AccessTokenManagement.DPoP.DPoPProofThumbprint>
    {
        public DPoPProofThumbprint() { }
        public override string ToString() { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProofThumbprint FromJsonWebKey(Microsoft.IdentityModel.Tokens.JsonWebKey jsonWebKey) { }
        public static Duende.AccessTokenManagement.DPoP.DPoPProofThumbprint Parse(string value) { }
        public static bool TryParse(string value, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Duende.AccessTokenManagement.DPoP.DPoPProofThumbprint? parsed, out string[] errors) { }
    }
    public interface IDPoPKeyStore
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoP.DPoPProofKey?> GetKeyAsync(Duende.AccessTokenManagement.TokenClientName clientName, System.Threading.CancellationToken ct = default);
    }
    public interface IDPoPNonceStore
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoP.DPoPNonce?> GetNonceAsync(Duende.AccessTokenManagement.DPoP.DPoPNonceContext context, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task StoreNonceAsync(Duende.AccessTokenManagement.DPoP.DPoPNonceContext context, Duende.AccessTokenManagement.DPoP.DPoPNonce nonce, System.Threading.CancellationToken ct = default);
    }
    public interface IDPoPNonceStoreKeyGenerator
    {
        string GenerateKey(Duende.AccessTokenManagement.DPoP.DPoPNonceContext context);
    }
    public interface IDPoPProofService
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoP.DPoPProof?> CreateProofTokenAsync(Duende.AccessTokenManagement.DPoP.DPoPProofRequest request, System.Threading.CancellationToken ct = default);
        Duende.AccessTokenManagement.DPoP.DPoPProofThumbprint? GetProofKeyThumbprint(Duende.AccessTokenManagement.DPoP.DPoPProofKey dpopProofKey);
    }
}
namespace Duende.AccessTokenManagement.OTel
{
    public sealed class AccessTokenManagementMetrics
    {
        public const string MeterName = "Duende.AccessTokenManagement";
        public AccessTokenManagementMetrics(System.Diagnostics.Metrics.IMeterFactory meterFactory) { }
        public void AccessTokenAccessDeniedRetry(Duende.AccessTokenManagement.ClientId? clientId) { }
        public void AccessTokenUsed(Duende.AccessTokenManagement.ClientId? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type) { }
        public void DPoPNonceErrorRetry(Duende.AccessTokenManagement.ClientId? clientId, string? error) { }
        public void TokenRetrievalFailed(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type, string? error) { }
        public void TokenRetrieved(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type) { }
        public enum TokenRequestType
        {
            ClientCredentials = 1,
            User = 2,
        }
    }
    public static class ActivityNames
    {
        public const string AcquiringToken = "Duende.AccessTokenManagement.AcquiringToken";
    }
    public static class ActivitySourceNames
    {
        public static readonly string Main;
    }
    public static class ActivitySources
    {
        public static System.Diagnostics.ActivitySource Main;
    }
}