namespace Duende.AccessTokenManagement
{
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public abstract class AccessTokenHandler : System.Net.Http.DelegatingHandler
    {
        protected AccessTokenHandler(Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics metrics, Duende.AccessTokenManagement.IDPoPProofService dPoPProofService, Duende.AccessTokenManagement.IDPoPNonceStore dPoPNonceStore, Microsoft.Extensions.Logging.ILogger logger) { }
        protected abstract Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType TokenRequestType { get; }
        protected abstract System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> GetAccessTokenAsync(bool forceRenewal, System.Threading.CancellationToken cancellationToken);
        protected override System.Net.Http.HttpResponseMessage Send(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { }
        protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { }
        protected virtual System.Threading.Tasks.Task<bool> SetDPoPProofTokenAsync(System.Net.Http.HttpRequestMessage request, Duende.AccessTokenManagement.ClientCredentialsToken token, System.Threading.CancellationToken cancellationToken, string? dpopNonce = null) { }
        protected virtual System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> SetTokenAsync(System.Net.Http.HttpRequestMessage request, bool forceRenewal, System.Threading.CancellationToken cancellationToken, string? dpopNonce = null) { }
    }
    public static class ActivityNames
    {
        public const string AcquiringToken = "Duende.AccessTokenManagement.AcquiringToken";
    }
    public static class ActivitySourceNames
    {
        public static readonly string Main;
    }
    public static class ActivitySources
    {
        public static System.Diagnostics.ActivitySource Main;
    }
    public class ClientCredentialsClient
    {
        public ClientCredentialsClient() { }
        public Duende.IdentityModel.Client.BasicAuthenticationHeaderStyle AuthorizationHeaderStyle { get; set; }
        public Duende.IdentityModel.Client.ClientCredentialStyle ClientCredentialStyle { get; set; }
        public string? ClientId { get; set; }
        public string? ClientSecret { get; set; }
        public string? DPoPJsonWebKey { get; set; }
        public System.Net.Http.HttpClient? HttpClient { get; set; }
        public string? HttpClientName { get; set; }
        public Duende.IdentityModel.Client.Parameters Parameters { get; set; }
        public string? Resource { get; set; }
        public string? Scope { get; set; }
        public string? TokenEndpoint { get; set; }
    }
    public class ClientCredentialsToken
    {
        public ClientCredentialsToken() { }
        public string? AccessToken { get; set; }
        public string? AccessTokenType { get; set; }
        public string? ClientId { get; set; }
        public string? DPoPJsonWebKey { get; set; }
        public string? Error { get; set; }
        public System.DateTimeOffset Expiration { get; set; }
        public bool IsError { get; }
        public string? Scope { get; set; }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class ClientCredentialsTokenEndpointService : Duende.AccessTokenManagement.IClientCredentialsTokenEndpointService
    {
        public ClientCredentialsTokenEndpointService(Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics metrics, System.Net.Http.IHttpClientFactory httpClientFactory, Microsoft.Extensions.Options.IOptionsMonitor<Duende.AccessTokenManagement.ClientCredentialsClient> options, Duende.AccessTokenManagement.IClientAssertionService clientAssertionService, Duende.AccessTokenManagement.IDPoPKeyStore dPoPKeyMaterialService, Duende.AccessTokenManagement.IDPoPProofService dPoPProofService, Microsoft.Extensions.Logging.ILogger<Duende.AccessTokenManagement.ClientCredentialsTokenEndpointService> logger) { }
        public virtual System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> RequestToken(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken cancellationToken = default) { }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class ClientCredentialsTokenHandler : Duende.AccessTokenManagement.AccessTokenHandler
    {
        public ClientCredentialsTokenHandler(Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics metrics, Duende.AccessTokenManagement.IDPoPProofService dPoPProofService, Duende.AccessTokenManagement.IDPoPNonceStore dPoPNonceStore, Duende.AccessTokenManagement.IClientCredentialsTokenManagementService accessTokenManagementService, Microsoft.Extensions.Logging.ILogger<Duende.AccessTokenManagement.ClientCredentialsTokenHandler> logger, string tokenClientName) { }
        protected override Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType TokenRequestType { get; }
        protected override System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> GetAccessTokenAsync(bool forceRenewal, System.Threading.CancellationToken cancellationToken) { }
    }
    public class ClientCredentialsTokenManagementBuilder
    {
        public ClientCredentialsTokenManagementBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
        public Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder AddClient(string name, System.Action<Duende.AccessTokenManagement.ClientCredentialsClient> configureOptions) { }
        public Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder UsePreviewHybridCache() { }
    }
    public static class ClientCredentialsTokenManagementDefaults
    {
        public const string BackChannelHttpClientName = "Duende.AccessTokenManagement.BackChannelHttpClient";
        public const string DPoPProofAdditionalPayloadClaims = "Duende.AccessTokenManagement.DPoPProofAdditionalPayloadClaims";
        public const string TokenRequestParametersOptionsName = "Duende.AccessTokenManagement.AccessTokenParameters";
    }
    public class ClientCredentialsTokenManagementOptions
    {
        public ClientCredentialsTokenManagementOptions() { }
        public string CacheKeyPrefix { get; set; }
        public int CacheLifetimeBuffer { get; set; }
        public string NonceStoreKeyPrefix { get; set; }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class ClientCredentialsTokenManagementService : Duende.AccessTokenManagement.IClientCredentialsTokenManagementService
    {
        public ClientCredentialsTokenManagementService(Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics metrics, Duende.AccessTokenManagement.IClientCredentialsTokenEndpointService clientCredentialsTokenEndpointService, Duende.AccessTokenManagement.IClientCredentialsTokenCache tokenCache) { }
        public System.Threading.Tasks.Task DeleteAccessTokenAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> GetAccessTokenAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public static class ClientCredentialsTokenManagementServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientCredentialsHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string httpClientName, string tokenClientName, System.Action<System.Net.Http.HttpClient>? configureClient = null) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientCredentialsHttpClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string httpClientName, string tokenClientName, System.Action<System.IServiceProvider, System.Net.Http.HttpClient> configureClient) { }
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddClientCredentialsTokenHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, string tokenClientName) { }
        public static Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder AddClientCredentialsTokenManagement(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public static Duende.AccessTokenManagement.ClientCredentialsTokenManagementBuilder AddClientCredentialsTokenManagement(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Duende.AccessTokenManagement.ClientCredentialsTokenManagementOptions> options) { }
    }
    public static class DPoPExtensions
    {
        public static void AddDPoPProofAdditionalPayloadClaims(this System.Net.Http.HttpRequestMessage request, System.Collections.Generic.IDictionary<string, string> customClaims) { }
        public static void ClearDPoPProofToken(this System.Net.Http.HttpRequestMessage request) { }
        public static string? GetDPoPError(this System.Net.Http.HttpResponseMessage response) { }
        public static string? GetDPoPNonce(this System.Net.Http.HttpResponseMessage response) { }
        public static string GetDPoPUrl(this System.Net.Http.HttpRequestMessage request) { }
        public static bool IsDPoPError(this System.Net.Http.HttpResponseMessage response) { }
        public static void SetDPoPProofToken(this System.Net.Http.HttpRequestMessage request, string? proofToken) { }
        public static bool TryGetDPopProofAdditionalPayloadClaims(this System.Net.Http.HttpRequestMessage request, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out System.Collections.Generic.IReadOnlyDictionary<string, string>? additionalClaims) { }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class DPoPKey
    {
        [System.Obsolete(("Constructors of types with required members are not supported in this version of " +
            "your compiler."), true)]
        [System.Runtime.CompilerServices.CompilerFeatureRequired("RequiredMembers")]
        public DPoPKey() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public string JsonWebKey { get; set; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class DPoPNonceContext
    {
        [System.Obsolete(("Constructors of types with required members are not supported in this version of " +
            "your compiler."), true)]
        [System.Runtime.CompilerServices.CompilerFeatureRequired("RequiredMembers")]
        public DPoPNonceContext() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public string Method { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string Url { get; set; }
    }
    public class DPoPProof
    {
        public DPoPProof() { }
        public string ProofToken { get; set; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class DPoPProofRequest
    {
        [System.Obsolete(("Constructors of types with required members are not supported in this version of " +
            "your compiler."), true)]
        [System.Runtime.CompilerServices.CompilerFeatureRequired("RequiredMembers")]
        public DPoPProofRequest() { }
        public string? AccessToken { get; set; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string>? AdditionalPayloadClaims { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string DPoPJsonWebKey { get; set; }
        public string? DPoPNonce { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string Method { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string Url { get; set; }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class DefaultClientAssertionService : Duende.AccessTokenManagement.IClientAssertionService
    {
        public DefaultClientAssertionService() { }
        public System.Threading.Tasks.Task<Duende.IdentityModel.Client.ClientAssertion?> GetClientAssertionAsync(string? clientName = null, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null) { }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class DefaultDPoPKeyStore : Duende.AccessTokenManagement.IDPoPKeyStore
    {
        public DefaultDPoPKeyStore(Microsoft.Extensions.Options.IOptionsMonitor<Duende.AccessTokenManagement.ClientCredentialsClient> options) { }
        public virtual System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoPKey?> GetKeyAsync(string clientName) { }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class DefaultDPoPProofService : Duende.AccessTokenManagement.IDPoPProofService
    {
        public DefaultDPoPProofService(Duende.AccessTokenManagement.IDPoPNonceStore dPoPNonceStore, Microsoft.Extensions.Logging.ILogger<Duende.AccessTokenManagement.DefaultDPoPProofService> logger) { }
        public virtual System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoPProof?> CreateProofTokenAsync(Duende.AccessTokenManagement.DPoPProofRequest request) { }
        public virtual string? GetProofKeyThumbprint(Duende.AccessTokenManagement.DPoPProofRequest request) { }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class DistributedClientCredentialsTokenCache : Duende.AccessTokenManagement.IClientCredentialsTokenCache
    {
        public DistributedClientCredentialsTokenCache([Microsoft.Extensions.DependencyInjection.FromKeyedServices("ClientCredentialsTokenCache")] Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, Duende.AccessTokenManagement.IClientCredentialsCacheKeyGenerator cacheKeyGenerator, Duende.AccessTokenManagement.ITokenRequestSynchronization synchronization, Microsoft.Extensions.Options.IOptions<Duende.AccessTokenManagement.ClientCredentialsTokenManagementOptions> options, Microsoft.Extensions.Logging.ILogger<Duende.AccessTokenManagement.DistributedClientCredentialsTokenCache> logger) { }
        public System.Threading.Tasks.Task DeleteAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Threading.CancellationToken cancellationToken = default) { }
        [System.Obsolete(("This method is deprecated and will be removed in a future version. To customize C" +
            "acheKeyGeneration, please use the property ClientCredentialsTokenManagementOptio" +
            "ns.GenerateCacheKey"))]
        protected virtual string GenerateCacheKey(Duende.AccessTokenManagement.ClientCredentialsTokenManagementOptions options, string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null) { }
        public System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken?> GetAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> GetOrCreateAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Func<string, Duende.AccessTokenManagement.TokenRequestParameters, System.Threading.CancellationToken, System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken>> factory, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task SetAsync(string clientName, Duende.AccessTokenManagement.ClientCredentialsToken clientCredentialsToken, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Threading.CancellationToken cancellationToken = default) { }
    }
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public class DistributedDPoPNonceStore : Duende.AccessTokenManagement.IDPoPNonceStore
    {
        public DistributedDPoPNonceStore([Microsoft.Extensions.DependencyInjection.FromKeyedServices("DPoPNonceStore")] Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, Duende.AccessTokenManagement.IDPoPNonceStoreKeyGenerator dPoPNonceStoreKeyGenerator, Microsoft.Extensions.Logging.ILogger<Duende.AccessTokenManagement.DistributedDPoPNonceStore> logger) { }
        [System.Obsolete(("This method is deprecated and will be removed in a future version. To customize C" +
            "acheKeyGeneration, please use the property ClientCredentialsTokenManagementOptio" +
            "ns.GenerateNonceStoreKey"))]
        protected virtual string GenerateCacheKey(Duende.AccessTokenManagement.DPoPNonceContext context) { }
        public virtual System.Threading.Tasks.Task<string?> GetNonceAsync(Duende.AccessTokenManagement.DPoPNonceContext context, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task StoreNonceAsync(Duende.AccessTokenManagement.DPoPNonceContext context, string nonce, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public interface IClientAssertionService
    {
        System.Threading.Tasks.Task<Duende.IdentityModel.Client.ClientAssertion?> GetClientAssertionAsync(string? clientName = null, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null);
    }
    public interface IClientCredentialsCacheKeyGenerator
    {
        string GenerateKey(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null);
    }
    public interface IClientCredentialsTokenCache
    {
        System.Threading.Tasks.Task DeleteAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken?> GetAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> GetOrCreateAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Func<string, Duende.AccessTokenManagement.TokenRequestParameters, System.Threading.CancellationToken, System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken>> factory, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task SetAsync(string clientName, Duende.AccessTokenManagement.ClientCredentialsToken clientCredentialsToken, Duende.AccessTokenManagement.TokenRequestParameters requestParameters, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IClientCredentialsTokenEndpointService
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> RequestToken(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IClientCredentialsTokenManagementService
    {
        System.Threading.Tasks.Task DeleteAccessTokenAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> GetAccessTokenAsync(string clientName, Duende.AccessTokenManagement.TokenRequestParameters? parameters = null, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IDPoPKeyStore
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoPKey?> GetKeyAsync(string clientName);
    }
    public interface IDPoPNonceStore
    {
        System.Threading.Tasks.Task<string?> GetNonceAsync(Duende.AccessTokenManagement.DPoPNonceContext context, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task StoreNonceAsync(Duende.AccessTokenManagement.DPoPNonceContext context, string nonce, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IDPoPNonceStoreKeyGenerator
    {
        string GenerateKey(Duende.AccessTokenManagement.DPoPNonceContext context);
    }
    public interface IDPoPProofService
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.DPoPProof?> CreateProofTokenAsync(Duende.AccessTokenManagement.DPoPProofRequest request);
        string? GetProofKeyThumbprint(Duende.AccessTokenManagement.DPoPProofRequest request);
    }
    public interface ITokenRequestSynchronization
    {
        System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken> SynchronizeAsync(string name, System.Func<System.Threading.Tasks.Task<Duende.AccessTokenManagement.ClientCredentialsToken>> func);
    }
    public static class ServiceProviderKeys
    {
        public const string ClientCredentialsTokenCache = "ClientCredentialsTokenCache";
        public const string DPoPNonceStore = "DPoPNonceStore";
    }
    public class TokenRequestParameters
    {
        public TokenRequestParameters() { }
        public Duende.IdentityModel.Client.ClientAssertion? Assertion { get; set; }
        public Duende.IdentityModel.Client.Parameters Context { get; set; }
        public bool ForceRenewal { get; set; }
        public Duende.IdentityModel.Client.Parameters Parameters { get; set; }
        public string? Resource { get; set; }
        public string? Scope { get; set; }
    }
}
namespace Duende.AccessTokenManagement.OTel
{
    [System.Obsolete(("This will be made internal or removed in a future version. If you are using this " +
        "type directly, please see https://duende.link/aacs4dq"), UrlFormat="https://duende.link/aacs4dq")]
    public sealed class AccessTokenManagementMetrics
    {
        public const string MeterName = "Duende.AccessTokenManagement";
        public AccessTokenManagementMetrics(System.Diagnostics.Metrics.IMeterFactory meterFactory) { }
        public void AccessTokenAccessDeniedRetry(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type) { }
        public void AccessTokenAuthenticationFailed(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type) { }
        public void AccessTokenUsed(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type) { }
        public void DPoPNonceErrorRetry(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type, string? error) { }
        public void TokenRetrievalFailed(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type, string? error) { }
        public void TokenRetrieved(string? clientId, Duende.AccessTokenManagement.OTel.AccessTokenManagementMetrics.TokenRequestType type) { }
        public enum TokenRequestType
        {
            ClientCredentials = 1,
            User = 2,
        }
    }
}